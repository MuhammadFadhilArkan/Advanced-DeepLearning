{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CustomDenseLayeripynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyO+Gx36EeOsNCoxS29gea/D"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"aP_cpIErTAYp","executionInfo":{"status":"ok","timestamp":1633854308107,"user_tz":-420,"elapsed":1469,"user":{"displayName":"Muhammad Fadhil Arkan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04721188090415610949"}}},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ibL82KNCTJMf"},"source":["\n","Custom Layer with weights"]},{"cell_type":"markdown","metadata":{"id":"dwRadFr0TKjD"},"source":["To make custom layer that is trainable, we need to define a class that inherits the Layer base class from Keras. The Python syntax is shown below in the class declaration. This class requires three functions: __init__(), build() and call(). These ensure that our custom layer has a state and computation that can be accessed during training or inference."]},{"cell_type":"code","metadata":{"id":"Iw6ZqDahTGQ0","executionInfo":{"status":"ok","timestamp":1633854308663,"user_tz":-420,"elapsed":564,"user":{"displayName":"Muhammad Fadhil Arkan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04721188090415610949"}}},"source":["# inherit from this base class\n","from tensorflow.keras.layers import Layer\n","\n","class SimpleDense(Layer):\n","\n","    def __init__(self, units=32):\n","        '''Initializes the instance attributes'''\n","        super(SimpleDense, self).__init__()\n","        self.units = units\n","\n","    def build(self, input_shape):\n","        '''Create the state of the layer (weights)'''\n","        # initialize the weights\n","        w_init = tf.random_normal_initializer()\n","        self.w = tf.Variable(name=\"kernel\",\n","            initial_value=w_init(shape=(input_shape[-1], self.units),\n","                                 dtype='float32'),\n","            trainable=True)\n","\n","        # initialize the biases\n","        b_init = tf.zeros_initializer()\n","        self.b = tf.Variable(name=\"bias\",\n","            initial_value=b_init(shape=(self.units,), dtype='float32'),\n","            trainable=True)\n","\n","    def call(self, inputs):\n","        '''Defines the computation from inputs to outputs'''\n","        return tf.matmul(inputs, self.w) + self.b"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"421cK_LmTa7w"},"source":["Now we can use our custom layer like below:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1vHi-vBFTGDt","executionInfo":{"status":"ok","timestamp":1633854308665,"user_tz":-420,"elapsed":14,"user":{"displayName":"Muhammad Fadhil Arkan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04721188090415610949"}},"outputId":"91aa5972-1941-4a2e-9b03-8423fbda8bc6"},"source":["# declare an instance of the class\n","my_dense = SimpleDense(units=1)\n","\n","# define an input and feed into the layer\n","x = tf.ones((1, 1))\n","y = my_dense(x)\n","\n","# parameters of the base Layer class like `variables` can be used\n","print(my_dense.variables)"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[<tf.Variable 'simple_dense/kernel:0' shape=(1, 1) dtype=float32, numpy=array([[0.08671175]], dtype=float32)>, <tf.Variable 'simple_dense/bias:0' shape=(1,) dtype=float32, numpy=array([0.], dtype=float32)>]\n"]}]},{"cell_type":"markdown","metadata":{"id":"Msk1WZzXTeK7"},"source":["Let's then try using it in simple network:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TQLQTXZeTF9-","executionInfo":{"status":"ok","timestamp":1633854310568,"user_tz":-420,"elapsed":1910,"user":{"displayName":"Muhammad Fadhil Arkan","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04721188090415610949"}},"outputId":"d39faf06-e76a-44fc-9bfa-0c380cdf9752"},"source":["# define the dataset\n","xs = np.array([-1.0,  0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)\n","ys = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float)\n","\n","\n","# use the Sequential API to build a model with our custom layer\n","my_layer = SimpleDense(units=1)\n","model = tf.keras.Sequential([my_layer])\n","\n","# configure and train the model\n","model.compile(optimizer='sgd', loss='mean_squared_error')\n","model.fit(xs, ys, epochs=500,verbose=0)\n","\n","# perform inference\n","print(model.predict([10.0]))\n","\n","# see the updated state of the variables\n","print(my_layer.variables)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[[18.981777]]\n","[<tf.Variable 'simple_dense_1/kernel:0' shape=(1, 1) dtype=float32, numpy=array([[1.9973592]], dtype=float32)>, <tf.Variable 'simple_dense_1/bias:0' shape=(1,) dtype=float32, numpy=array([-0.99181277], dtype=float32)>]\n"]}]}]}